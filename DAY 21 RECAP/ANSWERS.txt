ANS 1: its a framework used to fetch data from the database.it's an open source, cross platform and light weight.
it acts like data access layer. it's an API. It follows an ORM pattern.

ANS 2: entity framework/entity framework core/LINQ follows the ORM pattern which stands for Object Relational Model. O is a class , R is a relation and M does the mapping between class(table) and relation(objects).

ANS 3: Mapping is to map the table and class. It is done by EF API.

ANS 4: yes

ANS 5: EF - platfrom dependent, supports three approaches- db first/ model first/code first(works only on windows platform)
EF CORE - cross platform , supports two approaches.

ANS 6:
1.DB first approach 
2.code first approach.

ANS 7: 
1.Microsoft.EntityFrameworkCore
2.Microsoft.EntityFrameworkCore.Tools
3.Microsoft.EntityFrameworkCore.UseSqlserver

ANS 8: 
1.using 'project-> manage Nuget Packages -> Browse ->type the library name ->search -> select version ->install'
2.tools -> nuget package manager -> package manager console -> type commands(install -package Microsoft.EntityFrameworkCore -Version 8.0.1)

ANS 9: scaffold-dbcontext used to auto generate a code for you, using this will create/generates a dbcontext class and entity class (all your entity framework core project is created).

ANS 10: scaffold-dbcontext  "Server=servername;Database=database name;Integrated Security=true;TrustServerCertificate=True" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models

ANS 11: Dependecy - a software/app/class is depending/dependent on another class for its functionality.the another class is a dependency.

EXAMPLE - we are depending on ingredients to get a food item , and here our program is dependent on db context class.

ANS 12: Dependency Injection , injecting the object of dependency so that we can use all the functions/methods/properties.
DBContext -> dependency
we called it in a controller
we used constructor to inject the dependency.

ANS 13: to create a loosely coupled application.so your application need not stop and your backened continue to work.

ANS 14: Inversion of control - giving permission/control flow is given to framework to create objects.

ANS 15: dbcontext class - connects to database , save changes , track changes, update changes to database and it provide us the property which help us to write crud(select, selectall, delete, insert) operations. 
each table becomes a property.

ANS 16: using connection string(it is passed to dbcontext as options from program.cs)
connection string is typed in appsettings.json.

ANS 17: CONNECTION STRING: connects db context class with database.
"ConnectionString": {
    "Constr": "Server=servername;Database=databasename;Integrated Security=true;TrustServerCertificate=True"
},

ANS 18: M stands for Model in MVC .these c# classes handle data usingh properties and methods .

ANS 19: it creates you entity and context class in models.
the ouptput of scaffold -dbconttext is saved in models folder.

ANS 20: If i donot write -OutputDir Models, then entity class and context class will be present in projects , not in models.

ANS 21: db.Tablename.ToList();

ANS 22: db.Tablename.where(s => s.Id == id).Single();

ANS 23: searching for one student

ANS 24: C stands for Controller in MVC.

ANS 25: controller is a .cs class , it takes the request from the browser, process the request and give the response.

ANS 26: view -> solution explorer -> controller -> MVC Controller with views, using entity framework -> select model class and dbcontext class.
the generated controller will be with the syntax and that syntax will be generated by scaffold .

ANS 27: configuration file of our project where we add our connection string.

ANS 28:
builder.Services.AddDbContext<CapgeDbContext>
    (options => options.UseSqlServer
    (builder.Configuration.GetConnectionString("Constr")));

ANS 29:
using Microsoft.EntityFrameworkCore; // to use sqlserver
using WebApp1_day20.Models; // context class is here







